{"version":3,"sources":["component/MapWrapper.js"],"names":["mapRef","MapWrapper","state","lat","lng","zoom","dist","isMounted","handleOnMouseDown","targetLatLng","getCenter","_this","distance","setState","console","log","setDistance","props","getDist","srcLat","srcLng","targetLat","targetLng","dLat","Math","PI","dLon","a","sin","cos","d","atan2","sqrt","round","this","_this2","navigator","geolocation","getCurrentPosition","pos","coords","latitude","longitude","map","rootNode","center","maxZoom","minZoom","on","tileLayer","addTo","_this3","react__WEBPACK_IMPORTED_MODULE_5___default","createElement","Fragment","ref","mapNode","_Elements__WEBPACK_IMPORTED_MODULE_7__","className","onClick","React","Component"],"mappings":"4MAIIA,EAAS,KACQC,6MACnBC,MAAQ,CACNC,IAAK,EACLC,IAAK,EACLC,KAAM,GACNC,KAAM,GACNC,WAAW,KAyBbC,kBAAoB,WAClB,IAAMC,EAAeT,EAAOU,YACtBJ,EAAOK,EAAKC,SAASD,EAAKT,MAAMC,IAAKQ,EAAKT,MAAME,IAAKK,EAAaN,IAAKM,EAAaL,KAC1FO,EAAKE,SAAS,CACZP,KAAMA,IAERQ,QAAQC,IAAIJ,EAAKT,MAAMI,SAGzBU,YAAc,WACZL,EAAKM,MAAMC,QAAQP,EAAKT,MAAMI,SAGhCM,SAAW,SAACO,EAAQC,EAAQC,EAAWC,GACrC,IACIC,GAAQF,EAAYF,GAAUK,KAAKC,GAAK,IACxCC,GAAQJ,EAAYF,GAAUI,KAAKC,GAAK,IACxCE,EAAIH,KAAKI,IAAIL,EAAO,GAAKC,KAAKI,IAAIL,EAAO,GAC3CC,KAAKK,IAAIV,EAASK,KAAKC,GAAK,KAAOD,KAAKK,IAAIR,EAAYG,KAAKC,GAAK,KAClED,KAAKI,IAAIF,EAAO,GAAKF,KAAKI,IAAIF,EAAO,GAEnCI,EAPI,MAMA,EAAIN,KAAKO,MAAMP,KAAKQ,KAAKL,GAAIH,KAAKQ,KAAK,EAAIL,KAEnD,OAAIG,EAAI,EAAUN,KAAKS,MAAMH,GAAK,KACzBA,GAAK,EAAUN,KAAKS,MAAU,IAAJH,GAAY,IACxCA,uFA9CPI,KAAKrB,SAAS,CAAEN,WAAW,gDAET,IAAA4B,EAAAD,KAClBE,UAAUC,YAAYC,mBAAmB,SAACC,GAEnCJ,EAAKjC,MAAMK,WAEhB4B,EAAKtB,SAAS,CACZV,IAAKoC,EAAIC,OAAOC,SAChBrC,IAAKmC,EAAIC,OAAOE,WACf,YACD1C,EAAS2C,cAAIR,EAAKS,SAAU,CAC1BC,OAAQ,CAACV,EAAKjC,MAAMC,IAAKgC,EAAKjC,MAAME,KACpCC,KAAM8B,EAAKjC,MAAMG,KACjByC,QAAS,GACTC,QAAS,MAEJC,GAAG,UAAWb,EAAK3B,mBAC1ByC,oBAAU,2CAA2CC,MAAMlD,wCA8BxD,IAAAmD,EAAAjB,KACP,OACEkB,EAAAzB,EAAA0B,cAACD,EAAAzB,EAAM2B,SAAP,KACEF,EAAAzB,EAAA0B,cAAA,OAAKE,IAAK,SAAAC,GAAO,OAAKL,EAAKP,SAAWY,KACjB,IAAnBtB,KAAKhC,MAAMI,KAAa8C,EAAAzB,EAAA0B,cAACI,EAAA,EAAD,CAAQC,UAAU,6BAA6BC,QAASzB,KAAKlB,aAA7D,aAAqFkB,KAAKhC,MAAMI,MAAiB,mDAK/I4B,KAAKrB,SAAS,CAAEN,WAAW,WAlESqD,IAAMC","file":"static/js/MapWrapper.a0c7ce29.chunk.js","sourcesContent":["import React from 'react';\nimport { map, tileLayer } from 'leaflet';\nimport { Button } from './Elements';\n\nlet mapRef = null;\nexport default class MapWrapper extends React.Component {\n  state = {\n    lat: 0,\n    lng: 0,\n    zoom: 15,\n    dist: '',\n    isMounted: false\n  }\n  componentWillMount() {\n    this.setState({ isMounted: true });\n  }\n  componentDidMount() {\n    navigator.geolocation.getCurrentPosition((pos) => {\n\n      if (!this.state.isMounted) return;\n\n      this.setState({\n        lat: pos.coords.latitude,\n        lng: pos.coords.longitude\n      }, () => {\n        mapRef = map(this.rootNode, {\n          center: [this.state.lat, this.state.lng],\n          zoom: this.state.zoom,\n          maxZoom: 18,\n          minZoom: 12\n        });\n        mapRef.on('moveend', this.handleOnMouseDown);\n        tileLayer('http://{s}.tile.osm.org/{z}/{x}/{y}.png').addTo(mapRef);\n      })\n    })\n  }\n  handleOnMouseDown = () => {\n    const targetLatLng = mapRef.getCenter();\n    const dist = this.distance(this.state.lat, this.state.lng, targetLatLng.lat, targetLatLng.lng);\n    this.setState({\n      dist: dist\n    })\n    console.log(this.state.dist);\n  }\n\n  setDistance = () => {\n    this.props.getDist(this.state.dist);\n  }\n\n  distance = (srcLat, srcLng, targetLat, targetLng) => {\n    var R = 6371; // km (change this constant to get miles)\n    var dLat = (targetLat - srcLat) * Math.PI / 180;\n    var dLon = (targetLng - srcLng) * Math.PI / 180;\n    var a = Math.sin(dLat / 2) * Math.sin(dLat / 2) +\n      Math.cos(srcLat * Math.PI / 180) * Math.cos(targetLat * Math.PI / 180) *\n      Math.sin(dLon / 2) * Math.sin(dLon / 2);\n    var c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));\n    var d = R * c;\n    if (d > 1) return Math.round(d) + \"km\";\n    else if (d <= 1) return Math.round(d * 1000) + \"m\";\n    return d;\n  }\n  render() {\n    return (\n      <React.Fragment>\n        <div ref={mapNode => (this.rootNode = mapNode)}></div>\n        {(this.state.dist != '' ? <Button className=\"btn btn-danger limitButton\" onClick={this.setDistance}>Set Limit {this.state.dist}</Button> : '')}\n      </React.Fragment>\n    );\n  }\n  componentWillUnmount() {\n    this.setState({ isMounted: false });\n  }\n}"],"sourceRoot":""}